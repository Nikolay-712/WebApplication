@page "/account/registration"
@inject IAccountClientService _accountClient
@inject NavigationManager _navigationManager

<PageTitle>Register</PageTitle>

<div class="row">
    <div class="col-md-6">
        @if (ShowRegistrationForm)
        {
            <EditForm Model="RequestModel" method="post" OnValidSubmit="RegistrationAsync">
                <FluentValidationValidator />
                <h2>Create a new account.</h2>
                <hr />

                <DisplayErrorMessage Message="@ErrorMessage" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="RequestModel.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="user name" />
                    <label for="user-name">User name</label>
                    <ValidationMessage For="() => RequestModel.UserName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="RequestModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => RequestModel.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="RequestModel.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => RequestModel.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="RequestModel.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm password</label>
                    <ValidationMessage For="() => RequestModel.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        }
        else
        {
            <h3>Register confirmation</h3>
            <p>Please check your email to confirm your account.</p>
        }
    </div>
</div>

@code {
    private RegistrationRequestModel RequestModel = new();
    private ResponseContent<bool> RegistrationResponse = new();
    private string ErrorMessage = string.Empty;
    private bool ShowRegistrationForm = true;

    private async Task RegistrationAsync()
    {
        RegistrationResponse = await _accountClient.RegistrationAsync(RequestModel);

        if (RegistrationResponse.ErrorResponse is not null)
        {
            ErrorMessage = RegistrationResponse.ErrorResponse.Message;
            return;
        }

        ShowRegistrationForm = false;
    }
}
