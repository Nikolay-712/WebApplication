@page "/account/registration"
@inject IAccountClientService _accountClient
@inject NavigationManager _navigationManager

<PageTitle>Register</PageTitle>

<div class="row">
    <div class="col-md-6">
        @if (showRegistrationForm)
        {
            <h2>Create a new account.</h2>
            <DisplayErrorMessage Message="@errorMessage" MessageChanged="@((msg) => errorMessage = msg)" />
            <MudCard>
                <MudForm Model="@requestModel" Validation="(requestValidator.ValidateRequestAsync)" @ref="registrationForm">
                    <MudCardContent>
                        <MudTextField @bind-Value="requestModel.UserName"
                                      For="() => requestModel.UserName"
                                      Label="User name"
                                      Variant="Variant.Outlined" />

                        <MudTextField @bind-Value="requestModel.Email"
                                      For="(() => requestModel.Email)"
                                      Label="Email"
                                      Variant="Variant.Outlined" />

                        <MudTextField @bind-Value="requestModel.Password"
                                      For="(() => requestModel.Password)"
                                      Label="Password"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentColor="Color.Primary"
                                      InputType="@PasswordInput"
                                      AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ShowPassword"
                                      AdornmentAriaLabel="Show Password" />

                        <MudTextField @bind-Value="requestModel.ConfirmPassword"
                                      For="(() => requestModel.ConfirmPassword)"
                                      Label="Confirm password"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentColor="Color.Primary"
                                      InputType="@PasswordInput"
                                      AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ShowPassword"
                                      AdornmentAriaLabel="Show Password" />
                    </MudCardContent>
                </MudForm>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await RegistrationAsync())">Order</MudButton>
                </MudCardActions>
            </MudCard>
        }
        else
        {
            <h3>Register confirmation</h3>
            <p>Please check your email to confirm your account.</p>
        }
    </div>
</div>

@code {
    private MudForm? registrationForm;
    private RegistrationRequestModel requestModel = new();
    private RegistrationRequestValidator requestValidator = new();
    private ResponseContent<bool> registrationResponse = new();

    private string errorMessage = string.Empty;
    private bool showRegistrationForm = true;

    private async Task RegistrationAsync()
    {
        await registrationForm!.Validate();

        if (registrationForm.IsValid)
        {

            registrationResponse = await _accountClient.RegistrationAsync(requestModel);

            if (registrationResponse.ErrorResponse is not null)
            {
                errorMessage = registrationResponse.ErrorResponse.Message;
                return;
            }

            showRegistrationForm = false;
        }

    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
