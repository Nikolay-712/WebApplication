@page "/account/change-password"
@inject IAccountClientService _accountClient
@inject NavigationManager _navigationManager

<PageTitle>Reset password</PageTitle>

<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="RequestModel" FormName="change-password" OnValidSubmit="ChangePasswordAsync" method="post">
            <FluentValidationValidator />
            <DisplayErrorMessage Message="@ErrorMessage" MessageChanged="@((msg) => ErrorMessage = msg)" />

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="RequestModel.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => RequestModel.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="RequestModel.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => RequestModel.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </EditForm>
    </div>
</div>



@code {
    [SupplyParameterFromQuery]
    private string? Identifier { get; set; }

    [SupplyParameterFromQuery]
    private string? Token { get; set; }

    private ChangePasswordRequestModel RequestModel = new();
    private string ErrorMessage = string.Empty;

    private ResponseContent ChangePasswordResponse = new();

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Identifier) || string.IsNullOrEmpty(Token))
        {
            _navigationManager.NavigateTo("/");
            return;
        }

        RequestModel.Identifire = Identifier;
        RequestModel.Token = Token;
    }

    private async Task ChangePasswordAsync()
    {
        ChangePasswordResponse = await _accountClient.ChangePasswordAsync(RequestModel);
        if (ChangePasswordResponse.ErrorResponse is not null)
        {
            ErrorMessage = ChangePasswordResponse.ErrorResponse.Message;
            return;
        }

        _navigationManager.NavigateTo("/login");
    }
}
