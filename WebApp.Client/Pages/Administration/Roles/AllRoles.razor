@page "/administration/roles/create"
@using WebApp.Models.Response.Roles
@inject IRoleClientService _roleClient

@attribute [Authorize(Roles = "Super admin")]

<div class="row">
    <div class="col-md-4">
        <section>
            <h4>Add new role</h4>
            <hr/>
            <EditForm Model="RequestModel" method="post" OnValidSubmit="CreateAsync">
                <FluentValidationValidator />

                <DisplayErrorMessage Message="@ErrorMessage" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="RequestModel.Name" class="form-control" autocomplete="Name" aria-required="true" placeholder="super admin" />
                    <label for="name" class="form-label">Role name</label>
                    <ValidationMessage For="() => RequestModel.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="RequestModel.DescriptionEn" class="form-control" autocomplete="Description" aria-required="true" placeholder="new description text" />
                    <label for="description" class="form-label">Description</label>
                    <ValidationMessage For="() => RequestModel.DescriptionEn" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="RequestModel.DescriptionBg" class="form-control" autocomplete="Description" aria-required="true" placeholder="new description text" />
                    <label for="description" class="form-label">Description</label>
                    <ValidationMessage For="() => RequestModel.DescriptionBg" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Create</button>
                </div>
            </EditForm>
        </section>
    </div>

    <div class="col-md-8">
        @if (AllRolesResponse.Result is not null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Created on</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var role in AllRolesResponse.Result)
                    {
                        <tr>
                            <td>@role.CreatedOn</td>
                            <td>@role.Name</td>
                            <td><button class="btn btn-primary btn btn-sm" @onclick="() => GetDetailsAsync(role.Id)">Details</button></td>
                            <td><button class="btn btn-danger btn btn-sm" @onclick="() => RemoveAsync(role.Id)">Remove</button></td>
                        </tr>

                    }
                </tbody>
            </table>
        }
    </div>
    @if (DetailsResponseModel.Result is not null)
    {
        <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Details</h4>
                        <button type="button" class="close" @onclick="@ModalClose">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>@DetailsResponseModel.Result.CreatedOn</p>
                        <p>@DetailsResponseModel.Result.Name</p>
                        <p>@DetailsResponseModel.Result.DescriptionEn</p>
                        <p>@DetailsResponseModel.Result.DescriptionBg</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn btn-sm" @onclick="() => UpdateAsync(DetailsResponseModel.Result.Id)">Update</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private ResponseContent CreateResponseContent = new();
    private ResponseContent<IReadOnlyList<RoleResponseModel>> AllRolesResponse = new();
    private ResponseContent<RoleResponseModel> DetailsResponseModel = new();
    private ResponseContent RemoveResponseContent = new();

    private CreateRoleRequestModel RequestModel = new();

    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AllRolesResponse = await _roleClient.GetAllAsync();
    }

    private async Task CreateAsync()
    {
        CreateResponseContent = await _roleClient.CreateAsync(RequestModel);
        if (CreateResponseContent.ErrorResponse is not null)
        {
            ErrorMessage = CreateResponseContent.ErrorResponse.Message;
            return;
        }

        ErrorMessage = string.Empty;
        RequestModel = new();
        AllRolesResponse = await _roleClient.GetAllAsync();
    }

    private async Task GetDetailsAsync(Guid id)
    {
        DetailsResponseModel = await _roleClient.GetDetailsAsync(id);
    }

    private async Task RemoveAsync(Guid id)
    {
        RemoveResponseContent = await _roleClient.RemoveAsync(id);
        if (RemoveResponseContent.ErrorResponse is not null)
        {
            ErrorMessage = RemoveResponseContent.ErrorResponse.Message;
            return;
        }

        ErrorMessage = string.Empty;
        RequestModel = new();
        AllRolesResponse = await _roleClient.GetAllAsync();
    }

    private async Task UpdateAsync(Guid id)
    {
        Console.WriteLine("Updating......");
    }

    private void ModalClose()
    {
        DetailsResponseModel = new();
    }

}
