@page "/administration/roles/create"
@inject IRoleClientService _roleClient
@inject IDialogService _dialogService

@attribute [Authorize(Roles = "Super admin")]

<div class="row">
    <div class="col-md-5">
        <MudCard>
            <MudForm Model="@RequestModel" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
                <DisplayErrorMessage Message="@ErrorMessage" />
                <MudSpacer />
                <MudCardContent>
                    <MudTextField @bind-Value="RequestModel.Name"
                                  For="@(() => RequestModel.Name)"
                                  Immediate="true"
                                  Label="Role name" />

                    <MudTextField Lines="5" @bind-Value="RequestModel.DescriptionEn"
                                  For="@(() => RequestModel.DescriptionEn)"
                                  Immediate="true"
                                  Label="Description En" />

                    <MudTextField Lines="5" @bind-Value="RequestModel.DescriptionBg"
                                  For="@(() => RequestModel.DescriptionBg)"
                                  Immediate="true"
                                  Label="Description Bg" />
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="@(async () => await CreateAsync())">
                    Create
                </MudButton>
            </MudCardActions>
        </MudCard>
    </div>

    <div class="col-md-7">
        @if (AllRolesResponse.Result is not null)
        {
            <MudDataGrid T="RoleResponseModel" Items="@AllRolesResponse.Result">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">All roles</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0">
                    </MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="role => role.CreatedOn" Title="Created on" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="role => role.Name" Title="Role name" Sortable="false" Filterable="false" />
                    <TemplateColumn CellClass="d-flex justify-end">

                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Info"
                                           Color="Color.Primary" aria-label="Details"
                                           OnClick="() => GetDetailsAsync(context.Item.Id)">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Success" aria-label="Edit">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                           Color="Color.Error" aria-label="Remove"
                                           OnClick="() => RemoveAsync(context.Item.Id)">

                            </MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>

            @if (DetailsResponseModel.Result is not null)
            {
                <MudPopover Open="@_isOpen" Fixed="false" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudText>@DetailsResponseModel.Result.Name</MudText>
                            <MudText>@DetailsResponseModel.Result.CreatedOn</MudText>
                            <MudText>@DetailsResponseModel.Result.DescriptionBg</MudText>
                            <MudText>@DetailsResponseModel.Result.DescriptionEn</MudText>

                            <MudButton OnClick="@ToggleOpen"
                                       Class="ml-auto mr-n3 mb-1"
                                       Color="Color.Error">
                                Close
                            </MudButton>
                        </div>
                    </MudPopover>
            }
        }
    </div>

</div>

@code {

    MudForm? form;
    CreteRoleRequestValidator validator = new();
    string state = "Message box hasn't been opened yet";

    private ResponseContent CreateResponseContent = new();
    private ResponseContent<IReadOnlyList<RoleResponseModel>> AllRolesResponse = new();
    private ResponseContent<RoleResponseModel> DetailsResponseModel = new();
    private ResponseContent RemoveResponseContent = new();

    private CreateRoleRequestModel RequestModel = new();

    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AllRolesResponse = await _roleClient.GetAllAsync();
    }

    private async Task CreateAsync()
    {
        await form!.Validate();

        if (form.IsValid)
        {
            CreateResponseContent = await _roleClient.CreateAsync(RequestModel);
            if (CreateResponseContent.ErrorResponse is not null)
            {
                ErrorMessage = CreateResponseContent.ErrorResponse.Message;
                return;
            }

            ErrorMessage = string.Empty;
            RequestModel = new();
            AllRolesResponse = await _roleClient.GetAllAsync();
        }
    }

    private async Task GetDetailsAsync(Guid id)
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
        DetailsResponseModel = await _roleClient.GetDetailsAsync(id);
    }

    private async Task RemoveAsync(Guid id)
    {
        RoleResponseModel? role = AllRolesResponse.Result.FirstOrDefault(x => x.Id == id);
        bool? result = await _dialogService.ShowMessageBox(
            "Delete",
            $"Are you sure you want to delete role with name {role.Name}?",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted";
        StateHasChanged();

        if (state == "Deleted")
        {
            RemoveResponseContent = await _roleClient.RemoveAsync(id);
            if (RemoveResponseContent.ErrorResponse is not null)
            {
                ErrorMessage = RemoveResponseContent.ErrorResponse.Message;
                return;
            }

            ErrorMessage = string.Empty;
            RequestModel = new();
            AllRolesResponse = await _roleClient.GetAllAsync();
        }

    }
    private string _searchString;

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}
