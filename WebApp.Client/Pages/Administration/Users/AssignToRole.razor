@page "/administration/users/assign-role"
@inject IUserClientService _userClient;
@inject IRoleClientService _roleClient;
@inject NavigationManager _navigationManager;

@attribute [Authorize(Roles = "Super admin")]

<div class="row">
    <div class="col-md-5">
        <MudDataGrid Items="@allRoles" ReadOnly="@true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">All Roles</MudText>
                <MudSpacer />
                <MudTextField T="string" OnDebounceIntervalElapsed="OnSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" DebounceInterval="500" Class="mt-0" />
            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="RoleResponseModel" />
                <PropertyColumn Property="x => x.Name" />
            </Columns>
            <ChildRowContent>
                <MudCard>

                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Description: @context.Item.DescriptionBg</MudText>
                            <MudText>Description: @context.Item.DescriptionEn</MudText>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Class="ml-auto"
                                       OnClick="@(() => AddRoleAsync(context.Item.Id))">
                                Add role
                            </MudButton>
                        </MudCardContent>
                    </MudCard>
                </ChildRowContent>
            </MudDataGrid>
        </div>
        <div class="col-md-7">
            <DisplayErrorMessage Message="@errorMessage" MessageChanged="@((msg) => errorMessage = msg)" />

            @if (userDetailsResponse.Result is not null)
        {
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.h6">User Details</MudText>
                            <MudText><b>Email:</b> @userDetailsResponse.Result.Email</MudText>
                                <MudText><b>Username:</b> @userDetailsResponse.Result.UserName</MudText>
                                <MudText><b>Created On:</b> @userDetailsResponse.Result.CreatedOn</MudText>
                                <MudText><b>Email Confirmed:</b> @(userDetailsResponse.Result.IsConfirmedEmail ? "Yes" : "No")</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudText Typo="Typo.h6">Roles</MudText>
                                <MudChipSet AllClosable="true" OnClose="RemoveRoleAsync">

                                    @foreach (var userRole in userDetailsResponse.Result.Roles)
                                {
                                    <MudChip Icon="@Icons.Material.Filled.VerifiedUser" Value="@userRole.Id" Color="Color.Info">@userRole.Name</MudChip>
                                }

                            </MudChipSet>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        }

    </div>
</div>



@code {

    [SupplyParameterFromQuery]
    private Guid? userId { get; set; }
    private string errorMessage = string.Empty;

    private IReadOnlyList<RoleResponseModel> allRoles;
    private ResponseContent<IReadOnlyList<RoleResponseModel>> allRolesResponse = new();
    private ResponseContent<UserResponseModel> userDetailsResponse = new();

    protected override async Task OnInitializedAsync()
    {
        if (userId is null)
        {
            _navigationManager.NavigateTo("/", true);
        }


        allRolesResponse = await _roleClient.GetAllAsync();
        userDetailsResponse = await _userClient.GetDetailsAsync(userId!.Value);
        allRoles = allRolesResponse.Result;
    }

    private void OnSearch(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            allRoles = allRoles.Where(x => x.Name.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else
        {
            allRoles = allRolesResponse.Result;
        }
    }

    private AssignToRoleRequestModel assignToRequestModel = new();
    private ResponseContent assignToRoleResponse = new();

    private async Task AddRoleAsync(Guid roleId)
    {
        assignToRequestModel.UserId = userId!.Value;
        assignToRequestModel.RoleId = roleId;

        assignToRoleResponse = await _userClient.AssignUserToRoleAsync(assignToRequestModel);

        if (assignToRoleResponse.ErrorResponse is not null)
        {
            errorMessage = assignToRoleResponse.ErrorResponse.Message;
            return;
        }

        userDetailsResponse = await _userClient.GetDetailsAsync(userId!.Value);
    }

    private RemoveFromRoleRequestModel removeFromRoleRequestModel = new();
    private ResponseContent removeFromRoleResponseModel = new();

    public async Task RemoveRoleAsync(MudChip selectedRole)
    {
        string? roleId = selectedRole.Value.ToString();

        removeFromRoleRequestModel.UserId = userId!.Value;
        removeFromRoleRequestModel.RoleId = new Guid(roleId!);

        removeFromRoleResponseModel = await _userClient.RemoveUserFromRoleAsync(removeFromRoleRequestModel);
        if (removeFromRoleResponseModel.ErrorResponse is not null)
        {
            errorMessage = removeFromRoleResponseModel.ErrorResponse.Message;
            Console.WriteLine(errorMessage);
            return;
        }

        userDetailsResponse = await _userClient.GetDetailsAsync(userId!.Value);
    }
}
