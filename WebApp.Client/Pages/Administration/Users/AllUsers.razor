@page "/administration/users/all"
@inject IUserClientService _userClient;
@inject NavigationManager _navigationManager;

<MudTable @ref="@usersTable" Items="@allUsers" RowsPerPage="@pageSize" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchTerm" OnDebounceIntervalElapsed="OnSearchAsync" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" DebounceInterval="500" Class="mt-0" />
        <MudSelect T="int" ValueChanged="OnChangePageSizeAsync" Label="Items per page" Value="@pageSize" Class="mt-0">
            <MudSelectItem Value="5" />
            <MudSelectItem Value="10" />
            <MudSelectItem Value="20" />
            <MudSelectItem Value="50" />
        </MudSelect>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Created on</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>User name</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.CreatedOn</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.UserName</MudTd>
            <MudFab Color="Color.Primary" @onclick="@(() => AssignToRole(context.UserId))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" />
        </RowTemplate>

        <PagerContent>
            <MudPagination SelectedChanged="OnChangePageAsync" Count="@pagesCount" Class="pa-4" />
        </PagerContent>
    </MudTable>



    @code {

    private MudTable<UserResponseModel> usersTable;

    private UsersFilter usersFilter = new();
    private ResponseContent<PaginationResponseModel<UserResponseModel>> responseContent = new();

    IReadOnlyList<UserResponseModel> allUsers = new List<UserResponseModel>();

    private int pageSize = 10;
    private int pagesCount;
    private string? searchTerm;

    protected override async Task OnInitializedAsync()
    {
        responseContent = await _userClient.GetAllAsync(usersFilter);
        allUsers = responseContent.Result.Items;
        pagesCount = responseContent.Result.PagesCount;
    }

    private async Task OnSearchAsync(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            usersFilter.SearchTerm = searchTerm;
            usersFilter.ItemsPerPage = null;
            usersFilter.PageNumber = null;
        }
        else
        {
            usersFilter.SearchTerm = searchTerm;
            usersFilter.ItemsPerPage = pageSize;
        }

        responseContent = await _userClient.GetAllAsync(usersFilter);
        allUsers = responseContent.Result.Items;
        pagesCount = responseContent.Result.PagesCount;
    }

    private async Task OnChangePageAsync(int pageNumber)
    {
        usersFilter.PageNumber = pageNumber;

        responseContent = await _userClient.GetAllAsync(usersFilter);
        allUsers = responseContent.Result.Items;
        pagesCount = responseContent.Result.PagesCount;

        usersTable.NavigateTo(pageNumber);
    }

    private async Task OnChangePageSizeAsync(int itemsPerPage)
    {
        usersFilter.ItemsPerPage = itemsPerPage;

        responseContent = await _userClient.GetAllAsync(usersFilter);
        allUsers = responseContent.Result.Items;
        pagesCount = responseContent.Result.PagesCount;

        pageSize = itemsPerPage;
    }

    private void AssignToRole(Guid userId)
    {
        _navigationManager.NavigateTo($"/administration/users/assign-role?userId={userId}");
    }
}
